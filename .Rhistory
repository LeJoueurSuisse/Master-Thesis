general_dfM %>%
group_by(month) %>% summarize(Total_cons = sum(energy_cons)/1000000) %>%
as_tsibble() %>%
autoplot() +
labs(title = "Total energy consumed by Switzerland",
subtitle = "Ammount in millions of kWh",
y = "", x = "")
test <- general_dfM %>%
group_by(month) %>% summarize(Total_cons = sum(energy_cons)/1000000)
View(test)
cons.m.tot <- general_dfM %>%
group_by(month) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble()
cons.m.tot
View(cons.m.tot)
general_dfM <- general_df %>%
mutate(month = yearmonth(date),
year = year(date)) %>%
as_tibble()
cons.m.tot <- general_dfM %>%
group_by(month) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble()
View(cons.m.tot)
cons.m.tot
help(filter_index)
cons.m.tot <- general_dfM %>%
group_by(month) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
filter_index(. ~ "2015-12")
cons.m.tot <- general_dfM %>%
group_by(month) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble() %>%
filter_index(. ~ "2015-12")
View(cons.m.tot)
cons.m.tot <- general_dfM %>%
group_by(month) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble() %>%
filter_index(. ~ "2021-12")
View(cons.m.tot)
cons.d.tot <- general_df %>%
group_by(date) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble() %>%
filter_index("2022-01-01" ~ .)
#Trying Different ARIMA models (Note to always include differencing of 1)
# Default R ARIMA
cons.m.tot %>%
model(ARIMA(Consumption)) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#Trying Different ARIMA models (Note to always include differencing of 1)
# Default R ARIMA
cons.m.tot %>%
model(ARIMA(Consumption)) %>%
forecast(h=17) %>%
autoplot(cons.m.tot %>%
filter_index("2018-01-01" ~ .))
help("forecast")
cons.m.fit <- cons.m.tot %>%
model(auto = ARIMA(Consumption, stepwise = FALSE, approximation = FALSE))
cons.d.fit <- cons.d.tot %>%
model(auto = ARIMA(Consumption, stepwise = FALSE, approximation = FALSE))
report(cons.m.fit)
report(cons.d.fit)
report(cons.m.fit)
cons.m.tot <- general_dfM %>%
group_by(month) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble()
cons.m.fit <- cons.m.tot %>%
model(auto = ARIMA(Consumption, stepwise = FALSE, approximation = FALSE))
cons.m.fit2 <- cons.m.tot %>%
filter_index(. ~ "2021-12") %>%
model(auto = ARIMA(Consumption, stepwise = FALSE, approximation = FALSE))
report(cons.m.fit)
report(cons.m.fit2)
report(cons.d.fit)
cons.m.fit %>%
forecast(h = 5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
cons.m.fit2 %>%
forecast(h = 12) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
cons.m.fit %>%
forecast(h = 5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
cons.m.fit2 %>%
forecast(h = 12) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ "2021-12"))
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.fit %>%
forecast(h = 15) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.fit %>%
forecast(h = 350) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
report(cons.d.fit)
arima.d.fit.test <- cons.d.tot %>%
model(arima211 = ARIMA(Consumption ~ pdq(2,1,1) + PDQ(0, 1, 1)),
arima012 = ARIMA(Consumption ~ pdq(0,1,2)+ PDQ(1, 1, 1)))
arima.d.fit.test %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
View(cons.d.tot)
cons.d.tot <- general_df %>%
group_by(date) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble() %>%
filter_index("2020-01-01" ~ .)
cons.d.fit <- cons.d.tot %>%
model(auto = ARIMA(Consumption, stepwise = FALSE, approximation = FALSE))
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
arima.d.fit.test <- cons.d.tot %>%
model(arima211 = ARIMA(Consumption ~ pdq(2,1,1) + PDQ(0, 1, 1)),
arima012 = ARIMA(Consumption ~ pdq(0,1,2)+ PDQ(1, 1, 1)))
arima.d.fit.test %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
arima.d.fit.test <- cons.d.tot %>%
model(arima211 = ARIMA(Consumption ~ pdq(1,0,1) + PDQ(0, 1, 1)),
arima012 = ARIMA(Consumption ~ pdq(0,1,2)+ PDQ(1, 1, 1)))
arima.d.fit.test %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
arima.d.fit.test <- cons.d.tot %>%
model(arima211 = ARIMA(Consumption ~ pdq(1,0,1) + PDQ(0, 0, 0)),
arima012 = ARIMA(Consumption ~ pdq(0,1,2)+ PDQ(0, 0, 0)))
arima.d.fit.test %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
arima.d.fit.test <- cons.d.tot %>%
model(arima7 = ARIMA(Consumption ~ PDQ(0, 0, 0) + fourier(k = 7)),
arima12 = ARIMA(Consumption ~ PDQ(0, 0, 0) + fourier(k = 12)),
arima365 = ARIMA(Consumption ~ PDQ(0, 0, 0) + fourier(k = 365)),)
arima.d.fit.test %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
arima.d.fit.test <- cons.d.tot %>%
model(dhr = ARIMA(Consumption ~ PDQ(0, 0, 0) + fourier(k = 6)))
arima.d.fit.test <- cons.d.tot %>%
model(arima211 = ARIMA(Consumption ~ pdq(2,1,1) + PDQ(0, 1, 1)),
arima012 = ARIMA(Consumption ~ pdq(0,1,2)+ PDQ(1, 1, 1)))
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
View(cons.d.fit)
View(con.d.tot)
bla <- cons.d.tot %>%
group_by(date) %>%
summarize(total = sum(energy_cons)/1000000)
View(con.d.tot)
cons.d.tot <- general_df %>%
group_by(date) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble() %>%
filter_index("2020-01-01" ~ .)
View(con.d.tot)
cons.d.tot <- general_df %>%
group_by(date) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble() %>%
filter_index("2020-01-01" ~ .) %>%
select(date, Consumption)
View(con.d.tot)
View(cons.d.tot)
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
View(cons.d.tot)
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.m.fit %>%
forecast(h = 5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.m.fit2 %>%
forecast(h = 12) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ "2021-12"))
cons.m.fit2 %>%
forecast(h = 12) %>%
autoplot(cons.m.tot %>%
filter_index("2018-01-01" ~ "2021-12"))
cons.m.fit2 %>%
forecast(h = 25) %>%
autoplot(cons.m.tot %>%
filter_index("2018-01-01" ~ "2021-12"))
cons.d.fit %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test <- decomposition_model(
STL(Consumption),
ETS(seaon_adjust ~ season("N"))
)
View(test)
cons.d.tot %>%
model(stl_ets = test) %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test <- decomposition_model(
STL(Consumption),
ETS(season_adjust ~ season("N"))
)
cons.d.tot %>%
model(stl_ets = test) %>%
forecast(h = 150) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.tot %>%
model(stl_ets = test) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test2 <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season("N"))
)
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test2 <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season(7))
)
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test2 <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season(12))
)
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test2 <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season(365))
)
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test2 <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season(12))
)
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.tot %>%
model(stl_ets = test) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test <- decomposition_model(
STL(Consumption),
ETS(season_adjust ~ season(12))
)
cons.d.tot %>%
model(stl_ets = test) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
test <- decomposition_model(
STL(Consumption),
ETS(season_adjust ~ season("N"))
)
cons.d.tot %>%
model(stl_ets = test) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
# Predicting Using the standard TSLM model
tslm.fcst <- cons.m.tot %>%
model(TSLM(Consumption ~ trend()+season() )) %>%
forecast(h=5)
tslm.fcst %>% autoplot(cons.m.tot)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season() )) %>%
forecast(h=150)
tslm.fcst %>% autoplot(cons.m.tot)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season() )) %>%
forecast(h=150)
tslm.fcst %>%
autoplot(cons.m.tot)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.m.tot %>%
model(TSLM(Consumption ~ trend()+season() )) %>%
forecast(h=5)
tslm.fcst %>% autoplot(cons.m.tot)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season() )) %>%
forecast(h=150)
tslm.fcst %>%
autoplot(cons.d.tot)
test3 <- decomposition_model(
STL(Consumption),
TSLM(season_adjust ~ season(12))
)
cons.d.tot %>%
model(stl_ets = test3) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.tot %>%
model(stl_ets = test) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season() )) %>%
forecast(h=150)
tslm.fcst %>%
autoplot(cons.d.tot)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season()+season_adjust ~ season(12))) %>%
forecast(h=150)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season())) %>%
forecast(h=150)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season()+ season_adjust ~ season(12))) %>%
forecast(h=150)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.d.tot %>%
model(TSLM(Consumption ~ trend()+season(12))) %>%
forecast(h=150)
tslm.fcst %>%
autoplot(cons.d.tot)
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.tot %>%
model(stl_ets = test2) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
cons.d.tot %>%
model(stl_ets = test3) %>%
forecast(h = 365) %>%
autoplot(cons.d.tot %>%
filter_index("2020-01-01" ~ .))
ets.d.fit <- decomposition_model(
STL(Consumption),
ETS(season_adjust ~ season("N"))
)
arima.d.fit <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season(12))
)
arima.d.fit <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season(12))
)
test <- decomposition_model(
STL(Consumption),
ARIMA(season_adjust ~ season(12))
)
test <- decomposition_model(
STL(Consumption),
ETS(season_adjust ~ season("N"))
)
tslm.d.fit.p %>%
accuracy()
source(here::here("Scripts/SetUp.R"))
source(file = here::here("Scripts/Cleaning_and_Wrangling.R"))
# Daily Production
## ETS
ets.d.fit.p %>%
forecast(h = 365) %>%
autoplot(prod.d.tot %>%
filter_index("2020-01-01" ~ .)) +
labs(title = "Daily forecast using the ETS method",
subtitle = "Ammount in millions of kWh",
y = "", x = "")
## Arima
arima.d.fit.p %>%
forecast(h = 365) %>%
autoplot(prod.d.tot %>%
filter_index("2020-01-01" ~ .)) +
labs(title = "Daily forecast using the ARIMA method",
subtitle = "Ammount in millions of kWh",
y = "", x = "")
## TSLM
tslm.d.fit.p %>%
forecast(h = 365) %>%
autoplot(prod.d.tot %>%
filter_index("2020-01-01" ~ .)) +
labs(title = "Daily forecast using the TSLM method",
subtitle = "Ammount in millions of kWh",
y = "", x = "")
tslm.d.fit.p %>%
accuracy()
# copy the R logo to the current directory
file.copy(file.path(R.home("doc"), "html", "logo.jpg"), '.')
# copy the R logo to the current directory
file.copy(file.path(R.home("doc"), "html", "logo.jpg"), '.')
# copy the R logo to the current directory
file.copy(file.path(R.home("doc"), "html", "~/GitHub/Master-Thesis/Data/Logo/LogoUnil.png"), '.')
# copy the R logo to the current directory
file.copy(file.path(R.home("doc"), "html", "~/GitHub/Master-Thesis/Data/Logo/LogoUnil.png"), '.')
# copy the R logo to the current directory
file.copy(file.path(R.home("doc"), "html", "~/GitHub/Master-Thesis/Data/Logo/LogoUnil.png"), '.')
# copy the R logo to the current directory
file.copy(file.path("~/GitHub/Master-Thesis/Data/Logo/LogoUnil.png"), '.')
# copy the R logo to the current directory
file.copy(file.path("~/GitHub/Master-Thesis/Data/Logo/LogoUnil.png"), '.')
help(file.copy)
# copy the R logo to the current directory
file.copy(file.path("~/GitHub/Master-Thesis/Data/Logo/LogoUnil.png"), "~/GitHub/Master-Thesis/Data/SwissGrid/")
\
\
\
\
\
\
\
\
\
\
\
Master in management,
\Orientation Business Analytics
source(here::here("Scripts/SetUp.R"))
source(file = here::here("Scripts/Cleaning_and_Wrangling.R"))
source(here::here("Scripts/SetUp.R"))
source(file = here::here("Scripts/Cleaning_and_Wrangling.R"))
data_all <- rbind(Data_2015, Data_2016, Data_2017, Data_2018, Data_2019,
Data_2020, Data_2021, Data_2022) %>%
clean_names() %>%
mutate(day_time = ifelse(hour > "07:00:00" & hour <= "19:00:00",
"Day", "Night")) %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour, day_time), .after = time)
source(file = here::here("Scripts/SetUp.R"))
data_files <- list.files(here::here("Data/SwissGrid"))
for(i in 7:length(data_files)){
assign(paste0("Data_", 2008 + i),
read_excel(paste0("~/GitHub/Master-Thesis/Data/SwissGrid/", data_files[i]),
sheet = "Zeitreihen0h15"))
}
source(file = here::here("Scripts/SetUp.R"))
data_files <- list.files(here::here("Data/SwissGrid"))
for(i in 7:length(data_files)){
assign(paste0("Data_", 2008 + i),
read_excel(paste0("~/GitHub/Master-Thesis/Data/SwissGrid/", data_files[i]),
sheet = "Zeitreihen0h15"))
}
