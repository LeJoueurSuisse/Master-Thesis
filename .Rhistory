sheet = "Zeitreihen0h15") %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ")
View(forecast_2023)
forecast_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time) %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour, day_time), .after = Time)
forecast_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time)
View(forecast_2023)
forecast_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time) %>%
clean_names() %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour, day_time), .after = time)
forecast_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time) %>%
clean_names() %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour), .after = time)
data_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time) %>%
clean_names() %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour), .after = time)
View(data_2023)
View(data_2023)
View(general_dfM)
View(general_df)
data_2023_M <- data_2023 %>%
mutate(month = yearmonth(date),
year = year(date)) %>%
as_tibble()
View(data_2023_M)
data_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time) %>%
clean_names() %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour), .after = time)
data_2023_M <- data_2023 %>%
mutate(month = yearmonth(date),
year = year(date)) %>%
as_tibble()
View(data_2023_M)
cons.m.test <- data_2023_M %>%
summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble()
my_variables <- colnames(data_all) # all the variable
times_var <- c(my_variables[1:8]) # time variable only
general_var <- my_variables[c(1:11, 14:17)] # general statistics
border_var <- my_variables[c(1:8, 18:28)] # exchange with borders statistics
my_variables <- colnames(data_all) # all the variable
source(file = here::here("Scripts/SetUp.R"))
data_files <- list.files(here::here("Data/SwissGrid"))
for(i in 7:length(data_files)){
assign(paste0("Data_", 2008 + i),
read_excel(paste0("~/GitHub/Master-Thesis/Data/SwissGrid/", data_files[i]),
sheet = "Zeitreihen0h15"))
}
for(i in 7:(length(data_files)-2)){
assign(paste0("Data_", 2008 + i),
mutate(get(paste0("Data_", 2008 + i)), Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time))
}
for(i in 13:(length(data_files))){
assign(paste0("Data_", 2008 + i),
mutate(get(paste0("Data_", 2008 + i)), Time = dmy_hm(Timestamp), .before = 1) %>%
mutate(Timestamp = Time) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time))
}
data_all <- rbind(Data_2015, Data_2016, Data_2017, Data_2018, Data_2019,
Data_2020, Data_2021, Data_2022) %>%
clean_names() %>%
mutate(day_time = ifelse(hour > "07:00:00" & hour <= "19:00:00",
"Day", "Night")) %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour, day_time), .after = time)
my_variables <- colnames(data_all) # all the variable
times_var <- c(my_variables[1:8]) # time variable only
general_var <- my_variables[c(1:11, 14:17)] # general statistics
border_var <- my_variables[c(1:8, 18:28)] # exchange with borders statistics
price_var <- my_variables[c(1:8, 29:32)] # price of control
canton_var <- my_variables[c(1:8, 33:70)] # prod and cons per cantons
foreign_var <- my_variables[c(1:8, 71:72)] # out of Switzerland manage by SwissGrid
cons.m.tot <- general_dfM %>%
group_by(month) %>% summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble()
data_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time) %>%
clean_names() %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour), .after = time) %>%
select(all_of(general_var)) %>%
rename(end_users_cons = total_energy_consumed_by_end_users_in_the_swiss_controlblock_k_wh,
energy_prod = total_energy_production_swiss_controlblock_k_wh,
energy_cons = total_energy_consumption_swiss_controlblock_k_wh,
pos_second = positive_secundary_control_energy_k_wh,
neg_second = negative_secundary_control_energy_k_wh,
pos_tertiary = positive_tertiary_control_energy_k_wh,
neg_tertiary = negative_tertiary_control_energy_k_wh)
general_var
general_var[-8]
data_2023 <- read_excel("~/GitHub/Master-Thesis/Data/Forecast/EnergieUebersichtCH-2023.xls",
sheet = "Zeitreihen0h15") %>%
mutate(Time = ymd_hms(Timestamp), .before = 1) %>%
separate(Timestamp, c('Date', 'Hour'), sep = " ") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
mutate(Month = as.Date(cut(Date, breaks = "months")),
Year = as.Date(cut(Date, breaks = "years"))) %>%
relocate(c(Year, Month), .after = Time) %>%
clean_names() %>%
mutate(month = month(ymd(month), label = TRUE)) %>%
mutate(hour = hour(hms(hour))) %>%
mutate(wday = wday(date, label = TRUE, week_start = 1)) %>%
mutate(year = year(date)) %>%
mutate(hourly = format(as.POSIXlt(time), "%Y-%m-%d %H:00:00")) %>%
mutate(hourly = ymd_hms(hourly))%>%
relocate(c(hourly, year, month, date, wday, hour), .after = time) %>%
select(all_of(general_var[-8])) %>%
rename(end_users_cons = total_energy_consumed_by_end_users_in_the_swiss_controlblock_k_wh,
energy_prod = total_energy_production_swiss_controlblock_k_wh,
energy_cons = total_energy_consumption_swiss_controlblock_k_wh,
pos_second = positive_secundary_control_energy_k_wh,
neg_second = negative_secundary_control_energy_k_wh,
pos_tertiary = positive_tertiary_control_energy_k_wh,
neg_tertiary = negative_tertiary_control_energy_k_wh)
cons.m.test <- data_2023_M %>%
summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble()
data_2023_M <- data_2023 %>%
mutate(month = yearmonth(date),
year = year(date)) %>%
as_tibble()
cons.m.test <- data_2023_M %>%
summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble()
data_2023_M <- data_2023 %>%
mutate(month = yearmonth(date),
year = year(date)) %>%
as_tibble()
cons.m.test <- data_2023_M %>%
summarize(Consumption = sum(energy_cons)/1000000)
cons.m.test <- data_2023_M %>%
group_by(month) %>%
summarize(Consumption = sum(energy_cons)/1000000)
View(cons.m.test)
cons.m.test <- data_2023_M %>%
group_by(month) %>%
summarize(Consumption = sum(energy_cons)/1000000)
View(cons.m.tot)
cons.m.tot %>%
model(ETS(Consumption)) %>%
gg_tsresiduals()
# Default ETS model analysis
cons.m.tot %>%
model(ETS(Consumption)) %>%
report()
# SES with different Alpha levels
cons.m.tot %>%
model(a1 = ETS(Consumption ~ error("A") + trend("N", alpha = 0.1) + season("N")),
a2 = ETS(Consumption ~ error("A") + trend("N", alpha = 0.4) + season("N")),
a3 = ETS(Consumption ~ error("A") + trend("N", alpha = 0.9) + season("N"))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot)
# Looking for optimal parameters
cons.m.tot %>%
model(ETS(Consumption ~ error("A") + trend("N") + season("N"),
opt_crit = "mse")) %>%
coefficients()
# Fitting a model with a high alpha
ets.consm.fit<- cons.m.tot %>%
model(ETS(Consumption ~ error("A") + trend("N", alpha = 0.9) + season("N")))
ets.consm.fit %>%
forecast(h = 5) %>%
autoplot(cons.m.tot) +
geom_line(aes(y = .fitted, colour = "Fitted"), data=augment(ets.consm.fit)) +
ylab("Consumption") + xlab("Year")
# Adding trend and seasonality
ets2.consm.fit <- cons.m.tot %>% model(
ana = ETS(Consumption ~ error("A") + trend("N") + season("A")),
mnm = ETS(Consumption ~ error("M") + trend("N") + season("M")),
anm = ETS(Consumption ~ error("A") + trend("N") + season("M")))
ets2.consm.fit %>% forecast(h = "5 months") %>%
autoplot(cons.m.tot, level = NULL, size = c(1.2)) + xlab("Year")
ets2.consm.fit %>%
glance() %>% arrange(AICc) %>% select(1:7)
accuracy(ets2.consm.fit, cons.m.test)
class(ets2.consm.fit)
class(cons.m.tot)
class(cons.m.tot)
typeof(cons.m.tot)
typeof(ets2.consm.fit)
ets2.consm.fit %>%
glance() %>% arrange(AICc) %>% select(1:7)
accuracy(ets2.consm.fit, cons.m.test)
ets2.consm.fit %>% forecast(h = "2 years") %>%
autoplot(cons.m.tot, level = NULL, size = c(1.2)) + xlab("Year")
# Adding trend and seasonality
ets2.consm.fit <- cons.m.tot %>% model(
ana = ETS(Consumption ~ error("A") + trend("A") + season("A")),
mnm = ETS(Consumption ~ error("M") + trend("A") + season("M")),
anm = ETS(Consumption ~ error("A") + trend("A") + season("M")))
ets2.consm.fit %>% forecast(h = "2 years") %>%
autoplot(cons.m.tot, level = NULL, size = c(1.2)) + xlab("Year")
ets2.consm.fit %>%
glance() %>% arrange(AICc) %>% select(1:7)
accuracy(ets2.consm.fit, cons.m.test)
cons.m.tot %>%
autoplot()
# Residuals test
pass.m.tot %>%
model(arima = ARIMA(Passengers)) %>% gg_tsresiduals()
# Residuals test
cons.m.tot %>%
model(arima = ARIMA(Consumption)) %>%
gg_tsresiduals()
#Trying Different ARIMA models (Note to always include differencing of 1)
# Default R ARIMA
cons.m.tot %>%
model(ARIMA(Consumption)) %>%
forecast(h=5) %>%
autoplot(cons.m.tot)
#Trying Different ARIMA models (Note to always include differencing of 1)
# Default R ARIMA
cons.m.tot %>%
model(ARIMA(Consumption)) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR1
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(1,1,0))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR1
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(1,1,0))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#MA1
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(0,1,1))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR111
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(1,1,1))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR211
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(2,1,1))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR112
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(1,1,2))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR212
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(2,1,2))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
# lets check for the best ARIMA
arima.fit <- cons.m.tot %>%
model(arima211 = ARIMA(Consumption ~ pdq(2,1,1)),
arima012 = ARIMA(Consumption ~ pdq(0,1,2)),
arima210 = ARIMA(Consumption ~ pdq(2,1,0)),
stepwise = ARIMA(Consumption),
search = ARIMA(Consumption, stepwise = FALSE))
arima.fit %>%
glance() %>% arrange(AICc) %>% select(1:7)
arima.fit %>% accuracy()
# Residuals test
cons.m.tot %>%
model(tslm = TSLM(Consumption)) %>%
gg_tsresiduals()
# fitting a TSLM
tslm.consm.fit <- cons.m.tot %>%
model(tslm = TSLM(Consumption ~ trend() + season()))
cons.m.tot %>%
autoplot(Consumption, col = "gray") +
geom_line(data = augment(tslm.consm.fit), aes(y = .fitted), col = "blue")
augment(tslm.consm.fit) %>%
ggplot(aes(x = .fitted, y = .innov)) +
geom_point() +
scale_x_log10()
augment(tslm.consm.fit) %>%
mutate(month = month(Month, label = TRUE)) %>%
ggplot(aes(x = month, y = .innov)) +
geom_boxplot()
augment(tslm.consm.fit) %>%
mutate(month = month(month, label = TRUE)) %>%
ggplot(aes(x = month, y = .innov)) +
geom_boxplot()
augment(tslm.consm.fit) %>%
as_tsibble() %>%
mutate(month = month(month, label = TRUE)) %>%
ggplot(aes(x = month, y = .innov)) +
geom_boxplot()
augment(tslm.consm.fit) %>%
as_tsibble()
augment(tslm.consm.fit) %>%
as_tsibble() %>%
mutate(month = month(month, label = TRUE))
augment(tslm.consm.fit) %>%
as_tsibble()
augment(tslm.consm.fit) %>%
mutate(month = month(month, label = TRUE))
cons.m.test <- data_2023_M %>%
group_by(month) %>%
summarize(Consumption = sum(energy_cons)/1000000) %>%
as_tsibble(index = month, key = Consumption)
cons.m.tot %>%
autoplot()
# Residuals test
cons.m.tot %>%
model(arima = ARIMA(Consumption)) %>%
gg_tsresiduals()
#Trying Different ARIMA models (Note to always include differencing of 1)
# Default R ARIMA
cons.m.tot %>%
model(ARIMA(Consumption)) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR1
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(1,1,0))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#MA1
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(0,1,1))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR111
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(1,1,1))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR211
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(2,1,1))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR112
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(1,1,2))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
#AR212
cons.m.tot %>%
model(AR1 = ARIMA(Consumption ~ pdq(2,1,2))) %>%
forecast(h=5) %>%
autoplot(cons.m.tot %>%
filter_index("2020-01-01" ~ .))
# lets check for the best ARIMA
arima.fit <- cons.m.tot %>%
model(arima211 = ARIMA(Consumption ~ pdq(2,1,1)),
arima012 = ARIMA(Consumption ~ pdq(0,1,2)),
arima210 = ARIMA(Consumption ~ pdq(2,1,0)),
stepwise = ARIMA(Consumption),
search = ARIMA(Consumption, stepwise = FALSE))
arima.fit %>%
glance() %>% arrange(AICc) %>% select(1:7)
arima.fit %>% accuracy()
tslmpw.passm.fit <- cons.m.tot %>%
model(piecewise = TSLM(Consumption~ trend(knots = c(2019, 2021))))
augment(tslm.consm.fit) %>%
autoplot(.fitted, color = "red") +
geom_line(aes(y = Consumption), colour = "black")
tslm.consm.fit <- cons.m.tot %>%
model(piecewise = TSLM(Consumption ~ trend(knots = c(2019, 2021))))
augment(tslm.consm.fit) %>%
autoplot(.fitted, color = "red") +
geom_line(aes(y = Consumption), colour = "black")
# Residuals test
cons.m.tot %>%
model(tslm = TSLM(Consumption)) %>%
gg_tsresiduals()
# fitting a TSLM
tslm.consm.fit <- cons.m.tot %>%
model(tslm = TSLM(Consumption ~ trend() + season()))
cons.m.tot %>%
autoplot(Consumption, col = "gray") +
geom_line(data = augment(tslm.consm.fit), aes(y = .fitted), col = "blue")
tslmpw.consm.fit <- cons.m.tot %>%
model(piecewise = TSLM(Consumption ~ trend(knots = c(2019, 2021))))
augment(tslmpw.consm.fit) %>%
autoplot(.fitted, color = "red") +
geom_line(aes(y = Consumption), colour = "black")
augment(tslm.consm.fit) %>%
autoplot(.fitted, color = "red") +
geom_line(aes(y = Consumption), colour = "black")
## forecasting with the 2 tslm models
tslm.consm.fit %>%
forecast(h=5) %>%
autoplot(cons.m.tot)
tslmpw.consm.fit %>%
forecast(h=5) %>%
autoplot(cons.m.tot)
# Checking Best model and accuracy
tslm.consm.fit %>%
glance() %>% arrange(AICc)
tslmpw.consm.fit %>%
glance() %>% arrange(AICc)
tslmpw.consm.fit%>% accuracy()
class(tslm.consm.fit)
# Predicting Using the standard TSLM model
tslm.fcst <- cons.m.tot %>%
model(TSLM(Consumption ~ trend()+season() )) %>%
forecast(h=5)
tslm.fcst %>% autoplot(cons.m.tot)
