relocate(c(hourly, year, month, date, wday, hour, day_time), .after = time)
my_variables <- colnames(data_all) # all the variable
times_var <- c(my_variables[1:8]) # time variable only
general_var <- my_variables[c(1:11, 14:17)] # general statistics
border_var <- my_variables[c(1:8, 18:28)] # exchange with borders statistics
price_var <- my_variables[c(1:8, 29:32)] # price of control
canton_var <- my_variables[c(1:8, 33:70)] # prod and cons per cantons
foreign_var <- my_variables[c(1:8, 71:72)] # out of Switzerland manage by SwissGrid
canton_df <- data_all %>% select(all_of(canton_var))
canton_prod <- canton_df[, -45] %>%
select(all_of(times_var), starts_with("prod"))
colnames(canton_prod) <- c(times_var, "argovie", "fribourg", "glaris", "grisons",
"lucerne", "neuchatel", "soleure", "saint_gall", "tessin",
"thurgovie", "valais", "appenzell", "bale", "berne_jura",
"schwytz_zoug", "obwald_nidwald_uri", "geneve_vaud",
"schaffhouse_zurich")
canton_long_prod <- canton_prod %>%
pivot_longer(-c(canton_var[1:8]), names_to = "Cantons", values_to = "production")
canton_cons <- canton_df[, -46] %>%
select(all_of(times_var), starts_with("cons"))
colnames(canton_cons) <- c(times_var, "argovie", "fribourg", "glaris", "grisons",
"lucerne", "neuchatel", "soleure", "saint_gall", "tessin",
"thurgovie", "valais", "appenzell", "bale", "berne_jura",
"schwytz_zoug", "obwald_nidwald_uri", "geneve_vaud",
"schaffhouse_zurich")
canton_long_cons <- canton_cons %>%
pivot_longer(-c(canton_var[1:8]), names_to = "Cantons", values_to = "consumption")
canton_df_long <- canton_long_prod %>%
mutate(consumption = canton_long_cons$consumption)
# Daily consumption for 2019
canton_df_long %>% group_by(date, Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
model(STL(Total_cons)) %>%
components() %>% autoplot()
# Daily production for 2019
canton_df_long %>% group_by(date, Cantons) %>%
summarize(Total_prod = sum(production)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
model(STL(Total_prod)) %>%
components() %>% autoplot()
# Monthly consumption
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total_cons = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
model(STL(total_cons))%>%
components() %>% autoplot()
# Monthly production
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total_prod = sum(production)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
model(STL(total_prod))%>%
components() %>% autoplot()
# Monthly consumption
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total_cons = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
model(STL(total_cons))%>%
components() %>% autoplot() +
facet_wrap(~Cantons)
canton_features <- canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total_cons = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
features(total_cons, feat_stl)
canton_features %>%
ggplot(aes(x = trend_strength, y = seasonal_strength_year, col = Cantons)) +
geom_point(size = 2)
# Consumption
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
facet_wrap(~Cantons) +
ggtitle("Monthly consumption per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
# Production
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(production)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
facet_wrap(~Cantons) +
ggtitle("Monthly production per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(consumption))
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(consumption)) %>%
arrange(desc(Totalsales))
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(consumption)) %>%
arrange(desc(Total_prod))
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
arrange(desc(Total_cons))
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod))
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod))%>%
slice(1:5)
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod))%>%
slice(1:10)
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod))%>%
slice(1:5)
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
arrange(desc(Total_cons))
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
arrange(desc(Total_cons)) %>%
slice(1:10)
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod)) %>%
slice(1:5)
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod)) %>%
slice(1:6)
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod)) %>%
slice(1:5)
# Best consumer
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
arrange(desc(Total_cons)) %>%
slice(1:10)
# Best producer
canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod)) %>%
slice(1:5)
source(file = here::here("Scripts/Cleaning_and_Wrangling.R"))
canton_df_long %>%
head(10) %>%
kable() %>%
kable_styling()
canton_df_long %>%
group_by(Cantons) %>%
summarize(n = n())
# Best consumer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)/1000000) %>%
ggplot(aes(x = Total_cons, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE)
top5_consumer <- canton_df_long %>% group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
arrange(desc(Total_cons)) %>%
slice(1:5)
top5_consumer <- top5_consumer$Cantons
# Best producer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_prod = sum(production)/1000000) %>%
ggplot(aes(x = Total_prod, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE)
top5_producer <- canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod)) %>%
slice(1:5)
top5_producer <- top5_producer$Cantons
# Best producer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_prod = sum(production)/1000000) %>%
ggplot(aes(x = Total_prod, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE)
# Best producer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_prod = sum(production)/1000000) %>%
ggplot(aes(x = Total_prod, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Daily consumption per canton in 2019")
# Best producer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_prod = sum(production)/1000000) %>%
ggplot(aes(x = Total_prod, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Total production per canton in 2019")
# Best consumer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)/1000000) %>%
ggplot(aes(x = Total_cons, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Total consumption per canton")
# Best consumer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)/1000000) %>%
ggplot(aes(x = Total_cons, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Total consumption per canton since 2018")
# Best producer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_prod = sum(production)/1000000) %>%
ggplot(aes(x = Total_prod, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Total production per canton since 2018")
# Best consumer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)/1000000) %>%
ggplot(aes(x = Total_cons, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Total consumption per canton since 2018")
top5_consumer <- canton_df_long %>% group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
arrange(desc(Total_cons)) %>%
slice(1:5)
top5_consumer <- top5_consumer$Cantons
# Best producer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_prod = sum(production)/1000000) %>%
ggplot(aes(x = Total_prod, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Total production per canton since 2018")
top5_producer <- canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod)) %>%
slice(1:5)
# Daily consumption
canton_df_long %>% group_by(date, Cantons) %>%
summarize(total = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
group_by(date, Cantons) %>%
summarize(total = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
canton_df_long %>%
filter(Cantons = top5_consumer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
canton_df_long %>%
filter(Cantons == top5_consumer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
canton_df_long %>%
filter(Cantons == top5_consumer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(consumption)/1000000) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
canton_df_long %>%
filter(Cantons == top5_consumer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(consumption)/1000) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
# Top 5 consumer
canton_df_long %>%
filter(Cantons == top5_producer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(production)/1000) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily production per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
top5_producer <- canton_df_long %>% group_by(Cantons) %>%
summarize(Total_prod = sum(production)) %>%
arrange(desc(Total_prod)) %>%
slice(1:5)
top5_producer <- top5_producer$Cantons
# Top 5 producer
canton_df_long %>%
filter(Cantons == top5_producer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(production)/1000) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily production per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
# Best consumer
canton_df_long %>%
filter(year > 2017) %>%
group_by(Cantons) %>%
summarize(Total_cons = sum(consumption)/1000000) %>%
ggplot(aes(x = Total_cons, y = Cantons, fill = Cantons)) +
geom_col(color = "black") +
guides(fill = FALSE) +
ggtitle("Total consumption per canton since 2018")
# Daily consumption
canton_df_long %>% group_by(date, Cantons) %>%
summarize(total = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
# Top 5 consumer
canton_df_long %>%
filter(Cantons == top5_consumer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(consumption)/1000) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily consumption per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
# Daily production
canton_df_long %>% group_by(date, Cantons) %>%
summarize(total = sum(production)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily production per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
# Top 5 producer
canton_df_long %>%
filter(Cantons == top5_producer) %>%
group_by(date, Cantons) %>%
summarize(total = sum(production)/1000) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
autoplot() +
ggtitle("Daily production per canton in 2019") +
ylab("Ammount in million of kWh") + xlab("Date")
# Monthly consumption
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(consumption)) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
ggtitle("Monthly consumption per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
# Monthly production
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(production)) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
ggtitle("Monthly production per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
# Consumption
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
facet_wrap(~Cantons) +
ggtitle("Monthly consumption per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
# Production
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(production)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
facet_wrap(~Cantons) +
ggtitle("Monthly production per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
# Monthly consumption with free scale
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
facet_wrap(~Cantons, scales = "free") +
ggtitle("Monthly consumption per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
# Monthly production with free scale
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total = sum(production)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
autoplot() +
facet_wrap(~Cantons, scales = "free") +
ggtitle("Monthly production per canton since 2018") +
ylab("Ammount in million of kWh") + xlab("Date")
# Daily consumption for 2019
canton_df_long %>% group_by(date, Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
model(STL(Total_cons)) %>%
components() %>% autoplot()
# Daily consumption for 2019
canton_df_long %>%
filter(Cantons == top5_consumer)
# Daily consumption for 2019
canton_df_long %>%
filter(Cantons == top5_consumer) %>%
group_by(date, Cantons) %>%
summarize(Total_cons = sum(consumption)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
model(STL(Total_cons)) %>%
components() %>% autoplot()
# Daily production for 2019
canton_df_long %>%
filter(Cantons == top5_producer) %>%
group_by(date, Cantons) %>%
summarize(Total_prod = sum(production)) %>%
as_tsibble(index = date, key = Cantons) %>%
filter_index("2019-01-01" ~ "2019-12-31") %>%
model(STL(Total_prod)) %>%
components() %>% autoplot()
# Monthly consumption
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total_cons = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
model(STL(total_cons))%>%
components() %>% autoplot()
# Monthly production
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total_prod = sum(production)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
model(STL(total_prod))%>%
components() %>% autoplot() +
facet_wrap(~Cantons)
# Monthly consumption
canton_df_long %>%
mutate(month = yearmonth(date), year = year(date)) %>%
group_by(month, Cantons) %>%
summarize(total_cons = sum(consumption)/1000000) %>%
as_tsibble(index = month, key = Cantons) %>%
filter_index("2018-01-01" ~ "2022-11-30") %>%
model(STL(total_cons))%>%
components() %>% autoplot()
